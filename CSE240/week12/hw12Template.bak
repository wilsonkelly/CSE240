;Your Name: 
;Course: CSE 240


;Q1 (3 points)
; enter your code here:


; Test cases
(newline)
(Display "AND-Gate Output\n")
(AND-GATE 0 0)
(AND-GATE 0 1)
(AND-GATE 1 0)
(AND-GATE 1 1)
; Expected outputs
;0
;0
;0
;1
; Test cases
(newline)
(Display "OR-Gate Output\n")
(OR-GATE 0 0)
(OR-GATE 0 1)
(OR-GATE 1 0)
(OR-GATE 1 1)
; Expected outputs
;0
;1
;1
;1
; Test cases
(newline)
(Display "NOT-Gate Output\n")
(NOT-GATE 0)
(NOT-GATE 1)
; Expected outputs
;1
;0

; Q2 (2 points)
; enter your code here:


; Test cases
(newline)
(newline)
(Display "XOR-Gate Output\n")
(XOR-GATE 0 0)
(XOR-GATE 0 1)
(XOR-GATE 1 0)
(XOR-GATE 1 1)
; Expected outputs
;0
;1
;1
;0

;Q3.1 (5 points)
; enter your code here:


;Q3.2 (5 points)
; enter your code here:


;Q3.3 (5 points)
; enter your code here:


; Test cases
(newline)
(Display "halfAdder Output\n")
(halfAdder 0 0 0) 	
(halfAdder 0 0 1) 	
(halfAdder 0 1 0) 	
(halfAdder 0 1 1)	
(halfAdder 1 0 0) 	
(halfAdder 1 0 1)	
(halfAdder 1 1 0) 	
(halfAdder 1 1 1)

; Expected outputs
;0
;1
;1
;0
;1
;0
;0
;1


; Test cases
(newline)
(Display "fullAdder Output\n")
(fullAdder 0 0 0) 	
(fullAdder 0 0 1) 	
(fullAdder 0 1 0) 	
(fullAdder 0 1 1)	
(fullAdder 1 0 0) 	
(fullAdder 1 0 1)	
(fullAdder 1 1 0) 	
(fullAdder 1 1 1)

; Expected outputs
;(0 . 0)
;(0 . 1)
;(0 . 1)
;(1 . 0)
;(0 . 1)
;(1 . 0)
;(1 . 0)
;(1 . 1)


;Q4.1 (4 points)
; enter your code here:


;Q4.2 (4 points)


;Q4.3
; Step 1 size-n problem: Lines of code
; ---->

; Step 2 Stopping condition: Lines of code
; ---->

; Step 3 size-m problem: Lines of code
; ---->

; Step 4: Lines of code
; ---->


;Q4.4 (18 points)
; enter your code here:


;Test cases
(define X1 '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) )	
(define X2 '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) )	
(define X3 '(0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1) )	
(define X4 '(1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0) )
(define X5 '(1 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1) )	
(define X6 '(1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 1 0) )


(newline)
(Display " n-bit-adder Output\n")
( n-bit-adder  X1 X2 32)
( n-bit-adder  X3 X4 32)
( n-bit-adder  X5 X6 32)
( n-bit-adder  X2 X3 32)
( n-bit-adder  X4 X5 32)
( n-bit-adder  X1 X6 32)
; Expected outputs
;(0 (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
;(0 (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
;(1 (1 0 1 1 1 0 0 0 1 1 1 0 0 1 0 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 1))
;(1 (0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0))
;(1 (1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1))
;(0 (1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 1 0))
